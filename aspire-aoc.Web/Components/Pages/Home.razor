@page "/"
@attribute [StreamRendering(true)]

@inject PuzzleApiClient PuzzleApi

<PageTitle>AoC 2023</PageTitle>

<h1>Puzzles</h1>

<p><a target="_blank" href="https://adventofcode.com/">Advent of Code</a> <code>0x07E7|2023 🎄</code></p>

<table class="table">
    <thead>
    <tr>
        <th>Day</th>
        <th>Part 1</th>
        <th>Part 2</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var day in _solutions)
    {
        <tr>
            <td>@day.Day</td>
            <td>@(string.IsNullOrEmpty(day.Part1.Answer) ? "Loading" : day.Part1.Answer)</td>
            <td>@(string.IsNullOrEmpty(day.Part2.Answer) ? "Loading" : day.Part2.Answer)</td>
        </tr>
    }
    </tbody>
</table>

@code {

    private readonly List<Puzzle> _solutions = new();

    protected override async Task OnInitializedAsync()
    {
        foreach (var day in Enumerable.Range(1, 31))
        {
            _solutions.Add(new Puzzle(day));
        }

        await LoadSolutions();
    }

    private async Task LoadSolutions()
    {
        foreach (var day in Enumerable.Range(1, 31))
        {
            var puzzle = _solutions[day - 1];
            puzzle.Part1.Answer = await PuzzleApi.GetSolution(puzzle.Day, 1);
            puzzle.Part2.Answer = await PuzzleApi.GetSolution(puzzle.Day, 2);
        }
    }

    private class Puzzle(int day)
    {
        public int Day { get; set; } = day;

        public Solution Part1 { get; set; } = new();

        public Solution Part2 { get; set; } = new();
    }

    private class Solution
    {
        public string? Answer { get; set; } = "";
    }
}